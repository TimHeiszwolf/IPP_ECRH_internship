import SBGeom
import meshio

import numpy as np
import os

## HELPER FUNCTIONS
def modulus_round(number, modulus=2):
    """
    Rounds a number to the nearest modulus.
    
    number: The number to be rounded.
    modulus: The modulus to which the number should be rounded.
    """
    return round(number / modulus) * modulus

## CORE FUNCTIONS
def create_positions_vmec(vmec_file, segment_parts, phi_values, distance):
    """
    A function, based on the package/script by Timo Boogaarts, to generate the vessel positions from the VMEC file.
    
    vmec_file: is the filename/location of the VMEC .nc4 magnetic configuration file. If not in the nc4 format convert it (on Linux) using "nccopy -k 4 wout.nc wout.nc4".
    segment_parts: is the amount of points each segment of the torus has.
    phi_values: the angle values (in degrees) of each segment. The amount of segments is equal to the length of this array.
    """
    s1 = SBGeom.Flux_Surfaces_Normal_Extended_From_HDF5(vmec_file)
    
    periodicity = 360/phi_values[-1]

    if periodicity!=int(periodicity):
        print("Error, someting wrong with periodicity. The maximum angle is not a fraction of 360 degrees.")

    phi = np.array(phi_values)*np.pi/180

    d = distance    
    theta = np.linspace(0.0,2 * np.pi, segment_parts)
    thetai, phii = np.meshgrid(theta, phi)
    tot_phi = phii.ravel()
    tot_theta = thetai.ravel()

    positions = s1.Return_Position(np.ones_like(tot_phi), np.ones_like(tot_phi) * d, tot_theta, tot_phi)

    tot_phi = np.arctan2(positions[:,1], positions[:,0])
    tot_r   = np.sqrt(positions[:,0]**2 + positions[:,1]**2) 
    tot_z   = positions[:,2]
    
    coordinates = {"phi":tot_phi, "r":tot_r, "z":tot_z, "segments":len(phi), "segment parts":segment_parts, "periodicity":int(periodicity)}
    coordinates["phi"] = coordinates["phi"]*180/np.pi# converts the coordinates to degrees.
    
    return coordinates

def make_vessel_stucture(coordinates, scale=0.01, extra_header=""):
    """
    A function which converts the 

    coordinates: the coordinates generated by the create_positions_vmec function.
    scale: Corresponds to the unit conversion. So 1 would mean meters, 0.01 would be centimeters and 0.001 would be milimeters
    """
    #print(len(coordinates["phi"]), coordinates["phi"])
    vessel_file = []
    vessel_file.append(["<This_is_the_vessel_file>", extra_header])
    vessel_file.append([coordinates["segments"], coordinates["segment parts"], coordinates["periodicity"], 0.0, 0.0, 0.0, 1, scale, 1, 1])# Check if scarf is OK
    
    """
    coordinates["phi"] = [modulus_round(phi, modulus=2) for phi in coordinates["phi"]]# Does rounding neccecairy for 
    current_phi = -1
    counter = 1
    for i in range(len(coordinates["phi"])):
        
        if current_phi!=coordinates["phi"][i]:
            current_phi = coordinates["phi"][i]
            counter = 1
            vessel_file.append([current_phi])
        
        vessel_file.append([coordinates["r"][i]/scale, coordinates["z"][i]/scale, counter])
        counter = counter+1
    #"""
    #"""
    for i in range(1, coordinates["segments"]+1):
        #current_phi = coordinates["phi"][(i-1)*coordinates["segment parts"]]
        current_phi = np.mean(coordinates["phi"][(i-1)*coordinates["segment parts"]:(i)*coordinates["segment parts"]])
        
        vessel_file.append([current_phi])
        for j in range(1, coordinates["segment parts"]+1):
            vessel_file.append([coordinates["r"][(i-1)*coordinates["segment parts"]+j-1]/scale, coordinates["z"][(i-1)*coordinates["segment parts"]+j-1]/scale, j])
    #"""
    
    return vessel_file

def save_vessel_structure(vessel_structure, filename):
    """
    Saves a list to a tab-separated file.

    vessel_structure: The list to save in this case the vessel_sturecture array.
    filename: The name of the file to save to.
    """

    with open(filename, 'w') as f:
        for row in vessel_structure:
            if isinstance(row, list):
                #f.write('\t'.join(map(str, row)) + '\n')
                f.write('    '.join(map(str, row)) + '\n')
            else:
                f.write(str(row) + '\n')

## EXCECUTION/SETTINGS
filename_input = "wout_squid_20230921_v1.nc4"# If not in the nc4 format convert it (on Linux) using "nccopy -k 4 wout.nc wout.nc4".
filename_output = "wout_squid_20230921_v1_vessel.txt"# The output where the vessel file is saved to.

segment_parts = 102# The number of parts each segment has.
d = 0.2
phi = np.linspace(0, 360, int(360/2+1))# Specify how many phi elements you want.

coordinates = create_positions_vmec(filename_input, segment_parts, phi, d)
vessel_structure = make_vessel_stucture(coordinates, scale=0.01, extra_header="")
save_vessel_structure(vessel_structure, filename_output)

#/venv/IPP/bin/python SBGeomCode.py